//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ikloud_Aflatoon
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AflatoonEntities : DbContext
    {
        public AflatoonEntities()
            : base("name=AflatoonEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccOwnershipCodeMaster> AccOwnershipCodeMasters { get; set; }
        public virtual DbSet<AccStatusCodeMaster> AccStatusCodeMasters { get; set; }
        public virtual DbSet<ActivityLog> ActivityLogs { get; set; }
        public virtual DbSet<ApplicationSetting> ApplicationSettings { get; set; }
        public virtual DbSet<AppSecPolicy> AppSecPolicies { get; set; }
        public virtual DbSet<AppSetting> AppSettings { get; set; }
        public virtual DbSet<Bank> Banks { get; set; }
        public virtual DbSet<Branch> Branches { get; set; }
        public virtual DbSet<ClearingHouseInterface> ClearingHouseInterfaces { get; set; }
        public virtual DbSet<Clearinghouse> ClearingHouses { get; set; }
        public virtual DbSet<CommonSetting> CommonSettings { get; set; }
        public virtual DbSet<CustomerMaster> CustomerMasters { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<CxfFileStatu> CxfFileStatus { get; set; }
        public virtual DbSet<DomainLevelSetting> DomainLevelSettings { get; set; }
        public virtual DbSet<Domain> Domains { get; set; }
        public virtual DbSet<DownloadedChiFile> DownloadedChiFiles { get; set; }
        public virtual DbSet<IWActivityLog> IWActivityLogs { get; set; }
        public virtual DbSet<IWBatchHeader> IWBatchHeaders { get; set; }
        public virtual DbSet<IWFinalMainTransaction> IWFinalMainTransactions { get; set; }
        public virtual DbSet<IWImageDtl> IWImageDtls { get; set; }
        public virtual DbSet<IWMainTransaction> IWMainTransactions { get; set; }
        public virtual DbSet<L1Verification> L1Verification { get; set; }
        public virtual DbSet<L2Verification> L2Verification { get; set; }
        public virtual DbSet<L3Verification> L3Verification { get; set; }
        public virtual DbSet<LoginLogoutAudit> LoginLogoutAudits { get; set; }
        public virtual DbSet<ModificationLog> ModificationLogs { get; set; }
        public virtual DbSet<MOPCodeMaster> MOPCodeMasters { get; set; }
        public virtual DbSet<OrganizationMaster> OrganizationMasters { get; set; }
        public virtual DbSet<OwCHIFileStatu> OwCHIFileStatus { get; set; }
        public virtual DbSet<PasswordHistory> PasswordHistories { get; set; }
        public virtual DbSet<RoleMapping> RoleMappings { get; set; }
        public virtual DbSet<UserDomainMapping> UserDomainMappings { get; set; }
        public virtual DbSet<UserMasterActivity> UserMasterActivities { get; set; }
        public virtual DbSet<UserMaster> UserMasters { get; set; }
        public virtual DbSet<UserOrganizationMapping> UserOrganizationMappings { get; set; }
        public virtual DbSet<ACDetail> ACDetails { get; set; }
        public virtual DbSet<IDX_IWDateQC> IDX_IWDateQC { get; set; }
        public virtual DbSet<IDX_IWL1> IDX_IWL1 { get; set; }
        public virtual DbSet<IDX_IWL2> IDX_IWL2 { get; set; }
        public virtual DbSet<IDX_IWL3> IDX_IWL3 { get; set; }
        public virtual DbSet<ItemReturnReason> ItemReturnReasons { get; set; }
        public virtual DbSet<SODs> SODs { get; set; }
        public virtual DbSet<IwSoD> IwSoD { get; set; }
        public virtual DbSet<TransCodes> TransCodes { get; set; }
        public virtual DbSet<ChequeAccountNoCapture> ChequeAccountNoCapture { get; set; }
        public virtual DbSet<SlipAccountNoCapture> SlipAccountNoCapture { get; set; }
        public virtual DbSet<CHIRejectReasons> CHIRejectReasons { get; set; }
        public virtual DbSet<ClearingType> ClearingType { get; set; }
        public virtual DbSet<OutwardOrganizationDashBoard> OutwardOrganizationDashBoard { get; set; }
        public virtual DbSet<OutwardSingleDomainDashBoard> OutwardSingleDomainDashBoard { get; set; }
        public virtual DbSet<NarrationAccount> NarrationAccount { get; set; }
        public virtual DbSet<NreNroAccountList> NreNroAccountList { get; set; }
        public virtual DbSet<OutwardDomainDashBoard> OutwardDomainDashBoard { get; set; }
        public virtual DbSet<BatchMaster> BatchMaster { get; set; }
        public virtual DbSet<CMS_SubCustomerMaster> CMS_SubCustomerMaster { get; set; }
        public virtual DbSet<SlipAmountCapture> SlipAmountCapture { get; set; }
        public virtual DbSet<CMS_BranchAccountMappings> CMS_BranchAccountMappings { get; set; }
        public virtual DbSet<IWTempL1Verification> IWTempL1Verification { get; set; }
        public virtual DbSet<IWFileHDR> IWFileHDRs { get; set; }
        public virtual DbSet<IWTempL2Verification> IWTempL2Verification { get; set; }
        public virtual DbSet<IWTempL3Verification> IWTempL3Verification { get; set; }
        public virtual DbSet<CMS_ProductSuspensionMaster> CMS_ProductSuspensionMaster { get; set; }
        public virtual DbSet<OutwardDomainDashBoard_V2> OutwardDomainDashBoard_V2 { get; set; }
        public virtual DbSet<CaptureFileMaster> CaptureFileMaster1Set { get; set; }
        public virtual DbSet<TempSnip1> TempSnip1Set { get; set; }
        public virtual DbSet<BankBlockageMaster> BankBlockageMaster { get; set; }
        public virtual DbSet<BranchMaster> BranchMaster { get; set; }
        public virtual DbSet<ChequeAmountCapture> ChequeAmountCapture { get; set; }
        public virtual DbSet<ChequeMICRCapture> ChequeMICRCaptures { get; set; }
        public virtual DbSet<ChiSessionDefinitionMaster> ChiSessionDefinitionMasters { get; set; }
        public virtual DbSet<CxfAcknowledge> CxfAcknowledges { get; set; }
        public virtual DbSet<CxfResponse> CxfResponses { get; set; }
        public virtual DbSet<DomainUserMapMaster> DomainUserMapMasters { get; set; }
        public virtual DbSet<DownloadedFileSummary> DownloadedFileSummaries { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<GridMaster> GridMasters { get; set; }
        public virtual DbSet<MenuMaster> MenuMasters { get; set; }
        public virtual DbSet<OwSoD> OwSoDs { get; set; }
        public virtual DbSet<ScannerMaster> ScannerMasters { get; set; }
        public virtual DbSet<ScanningNodeMaster> ScanningNodeMasters { get; set; }
        public virtual DbSet<SettingValueMaster> SettingValueMasters { get; set; }
        public virtual DbSet<UserCustomerMapping> UserCustomerMappings { get; set; }
        public virtual DbSet<UserGroupMaster> UserGroupMasters { get; set; }
        public virtual DbSet<UsertTpeMaster> UsertTpeMasters { get; set; }
        public virtual DbSet<CityMaster> CityMasters { get; set; }
        public virtual DbSet<DebitAccountDump> DebitAccountDumps { get; set; }
        public virtual DbSet<ICRLog> ICRLogs { get; set; }
        public virtual DbSet<OCRICR> OCRICRs { get; set; }
        public virtual DbSet<ChequeDateCapture> ChequeDateCaptures { get; set; }
        public virtual DbSet<IWDebtAccountTmpProcess> IWDebtAccountTmpProcess { get; set; }
        public virtual DbSet<IWAmountTmpProcess> IWAmountTmpProcesses { get; set; }
        public virtual DbSet<IWDateTmpProcess> IWDateTmpProcesses { get; set; }
        public virtual DbSet<IWMICRTmpProcess> IWMICRTmpProcesses { get; set; }
        public virtual DbSet<IWPayeeTmpProcess> IWPayeeTmpProcesses { get; set; }
        public virtual DbSet<CMS_ProductMaster> CMS_ProductMaster { get; set; }
        public virtual DbSet<CaptureRawData> CaptureRawData { get; set; }
        public virtual DbSet<CMS_BankBranchMaster> CMS_BankBranchMaster { get; set; }
        public virtual DbSet<CMS_CustomerMaster> CMS_CustomerMaster { get; set; }
        public virtual DbSet<CMS_CustomerProductAdditionaInfo> CMS_CustomerProductAdditionaInfo { get; set; }
        public virtual DbSet<CMS_CustomerProductLocationMaster> CMS_CustomerProductLocationMaster { get; set; }
        public virtual DbSet<CMS_CustomerProductMaster> CMS_CustomerProductMaster { get; set; }
        public virtual DbSet<CMS_OurBranchMaster> CMS_OurBranchMaster { get; set; }
        public virtual DbSet<MainTransaction> MainTransaction { get; set; }
        public virtual DbSet<BankBranches> BankBranches { get; set; }
        public virtual DbSet<Cities> Cities { get; set; }
        public virtual DbSet<CMSAdditionalTransactions> CMSAdditionalTransactions { get; set; }
        public virtual DbSet<SMB_Master> SMB_Master { get; set; }
        public virtual DbSet<DomainMaster> DomainMaster { get; set; }
        public virtual DbSet<AddList_FILE_UPLOAD_Format_BranchDataEntry> AddList_FILE_UPLOAD_Format_BranchDataEntry { get; set; }
        public virtual DbSet<RoleMaster> RoleMaster { get; set; }
    
        public virtual int UpdateSmbDataEntry(Nullable<long> iD, Nullable<long> rawDataId, Nullable<int> uid, string instrumentType, Nullable<double> finalAmount, string finalDate, string creditAccountNo, string payeName, Nullable<int> status, Nullable<int> customerId, Nullable<int> domainId, Nullable<int> scanningNodeId, string cTSNONCTS)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var rawDataIdParameter = rawDataId.HasValue ?
                new ObjectParameter("RawDataId", rawDataId) :
                new ObjectParameter("RawDataId", typeof(long));
    
            var uidParameter = uid.HasValue ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(int));
    
            var instrumentTypeParameter = instrumentType != null ?
                new ObjectParameter("InstrumentType", instrumentType) :
                new ObjectParameter("InstrumentType", typeof(string));
    
            var finalAmountParameter = finalAmount.HasValue ?
                new ObjectParameter("FinalAmount", finalAmount) :
                new ObjectParameter("FinalAmount", typeof(double));
    
            var finalDateParameter = finalDate != null ?
                new ObjectParameter("FinalDate", finalDate) :
                new ObjectParameter("FinalDate", typeof(string));
    
            var creditAccountNoParameter = creditAccountNo != null ?
                new ObjectParameter("CreditAccountNo", creditAccountNo) :
                new ObjectParameter("CreditAccountNo", typeof(string));
    
            var payeNameParameter = payeName != null ?
                new ObjectParameter("PayeName", payeName) :
                new ObjectParameter("PayeName", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var domainIdParameter = domainId.HasValue ?
                new ObjectParameter("DomainId", domainId) :
                new ObjectParameter("DomainId", typeof(int));
    
            var scanningNodeIdParameter = scanningNodeId.HasValue ?
                new ObjectParameter("ScanningNodeId", scanningNodeId) :
                new ObjectParameter("ScanningNodeId", typeof(int));
    
            var cTSNONCTSParameter = cTSNONCTS != null ?
                new ObjectParameter("CTSNONCTS", cTSNONCTS) :
                new ObjectParameter("CTSNONCTS", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSmbDataEntry", iDParameter, rawDataIdParameter, uidParameter, instrumentTypeParameter, finalAmountParameter, finalDateParameter, creditAccountNoParameter, payeNameParameter, statusParameter, customerIdParameter, domainIdParameter, scanningNodeIdParameter, cTSNONCTSParameter);
        }
    }
}
